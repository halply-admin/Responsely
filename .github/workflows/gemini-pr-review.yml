# .github/workflows/gemini-pr-review.yml
name: Gemini AI PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  gemini-review:
    runs-on: ubuntu-latest
    name: Gemini AI Code Review
    steps:
      - name: Run Gemini PR Review Action
        uses: consulting-brendan/peer-review@v1.0.0
        with:
          gemini-api-key: ${{ secrets.GEMINI_API_KEY }}
          review-diff-limit: '12000'
          review-prompt: |
            You are an expert code reviewer specializing in TypeScript, React, Next.js, and Convex database applications. 
            Please review the following pull request changes for the Responsely.ai customer support platform.

            **Focus areas for Responsely codebase:**
            - TypeScript best practices and type safety
            - React component patterns, hooks, and performance
            - Next.js App Router implementation
            - Convex database queries, mutations, and schema changes
            - API security and data validation
            - Customer support platform considerations (real-time features, data handling)
            - Accessibility for dashboard UI components
            - Performance implications for customer-facing widget
            - Email system integration (Resend/Convex)
            - Authentication and authorization (Clerk integration)

            **Review Structure:**
            1. **Code Quality Assessment** (1-10): Rate overall quality and explain reasoning
            2. **Security Analysis**: Identify vulnerabilities, especially API keys, user data, authentication
            3. **Performance Review**: Impact on customer widget, dashboard, real-time features
            4. **TypeScript/React Best Practices**: Deviations from modern patterns
            5. **Responsely-Specific Concerns**: Customer support platform implications
            6. **Suggestions**: Specific, actionable improvements with code examples

            **Pull Request Details:**
            - **Title**: {{ pr_title }}
            - **Description**: {{ pr_body }}
            - **Changed Files**: {{ changed_files }}

            **Code Changes:**
            ```diff
            {{ diff_content }}
            ```

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Semgrep Security Analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: |
            p/ci
            p/security-audit
            p/secrets
            p/typescript
            p/react
            p/nextjs

      - name: Post Security Results
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const sarifFile = 'semgrep-results.sarif';
            
            if (!fs.existsSync(sarifFile)) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ‚úÖ Security Analysis Complete\n\nNo security issues detected in this PR.\n\n---\n*Analyzed by Semgrep security scanner*`
              });
              return;
            }

            try {
              const sarifContent = fs.readFileSync(sarifFile, 'utf8');
              const sarifData = JSON.parse(sarifContent);
              
              if (!sarifData.runs?.[0]?.results?.length) {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## ‚úÖ Security Analysis Complete\n\nNo security issues detected in this PR.\n\n---\n*Analyzed by Semgrep security scanner*`
                });
                return;
              }

              const findings = sarifData.runs[0].results.map(result => {
                const ruleId = result.ruleId || 'Unknown Rule';
                const message = result.message?.text || 'No message';
                const location = result.locations?.[0]?.physicalLocation;
                const file = location?.artifactLocation?.uri || 'Unknown file';
                const line = location?.region?.startLine || '?';
                const severity = result.level || 'info';
                
                const severityEmoji = {
                  'error': 'üö®',
                  'warning': '‚ö†Ô∏è',
                  'info': '‚ÑπÔ∏è',
                  'note': 'üìù'
                }[severity] || '‚Ä¢';
                
                return `${severityEmoji} **${severity.toUpperCase()}** \`${ruleId}\`: ${message}\n   üìÅ \`${file}:${line}\``;
              }).join('\n\n');

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üîç Security Analysis Results\n\n${findings}\n\n---\n*Please review these findings carefully. Consider if any pose security risks to Responsely's customer data or platform.*\n\n*Analyzed by Semgrep security scanner*`
              });

              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['security-review-needed']
              });

            } catch (error) {
              console.error('Error processing security results:', error);
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ‚ö†Ô∏è Security Analysis Error\n\nThere was an error processing security scan results. Please check the workflow logs.\n\n---\n*Error: ${error.message}*`
              });
            }

  # Combined status check for branch protection
  ai-review-status:
    runs-on: ubuntu-latest
    needs: [gemini-review, security-scan]
    name: AI Review Complete
    if: always()
    steps:
      - name: Check Review Status
        run: |
          echo "Gemini Review Result: ${{ needs.gemini-review.result }}"
          echo "Security Scan Result: ${{ needs.security-scan.result }}"
          
          if [[ "${{ needs.gemini-review.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "‚úÖ AI review and security scan completed successfully"
            echo "This PR is ready for human review"
          else
            echo "‚ùå AI review or security scan failed"
            echo "Gemini Review: ${{ needs.gemini-review.result }}"
            echo "Security Scan: ${{ needs.security-scan.result }}"
            exit 1
          fi